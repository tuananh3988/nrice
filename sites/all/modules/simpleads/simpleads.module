<?php

/**
 * @file
 * SimpleAds module.
 */

include("includes/simpleads.helper.inc");
include("includes/simpleads.filter.inc");
include("includes/simpleads.integration.inc");

/**
 * Implements hook_menu().
 */
function simpleads_menu() {
  $items = array();

  $items['simpleads/load/%/%'] = array(
    'title' => 'Display Ads',
    'page callback' => '_simpleads_show_ads',
    'page arguments' => array(2, 3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/content/simpleads/%simpleadsid/stat'] = array(
    'title' => 'Ad Statistics',
    'page callback' => '_simpleads_stat_tab',
    'page arguments' => array(3),
    'access arguments' => array('access ad statistics'),
    'weight' => 15,
    'type' => MENU_LOCAL_TASK,
    'file' => 'simpleads.stat.inc',
  );

  $items['node/%simpleadsid/stat'] = array(
    'title' => 'Ad Statistics',
    'page callback' => '_simpleads_stat_tab',
    'page arguments' => array(1),
    'access callback' => '_simpleads_node_stat_tab',
    'weight' => 15,
    'type' => MENU_LOCAL_TASK,
    'file' => 'simpleads.stat.inc',
  );

  $items['admin/content/simpleads'] = array(
    'title' => 'Ads List',
    'page callback' => '_simpleads_listing',
    'access arguments' => array('access ad statistics'),
    'weight' => 15,
    'type' => MENU_LOCAL_TASK,
    'file' => 'simpleads.stat.inc',
  );

  $items['admin/content/simpleads/create_ad'] = array(
    'title' => 'Create new Ad',
    'page callback' => '_simpleads_new_add',
    'access callback' => '_simpleads_access_callback',
    'weight' => 15,
    'type' => MENU_LOCAL_ACTION,
  );

  $items['admin/content/simpleads/create_ad_group'] = array(
    'title' => 'Create new Ad Group',
    'page callback' => '_simpleads_new_group_add',
    'access callback' => '_simpleads_access_callback',
    'weight' => 15,
    'type' => MENU_LOCAL_ACTION,
  );

  $items['simpleads/redirect/%'] = array(
    'title' => 'Redirect Ads',
    'page callback' => '_simpleads_redirect',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['simpleads/dashboard/%'] = array(
    'title' => 'SimpleAds Filter',
    'description' => 'Filter Dashboard',
    'page callback' => '_simpleads_filter_dashboard_page',
    'access arguments' => array('administer nodes'),
    'type' => MENU_CALLBACK,
    'page arguments' => array(2),
    'theme callback' => '_simpleads_filter_dashboard_theme',
  );

  return $items;
}

/**
 * Implements hook_admin_paths().
 */
function simpleads_admin_paths() {
  if (variable_get('node_admin_theme')) {
    $paths = array(
      'node/*/stat' => TRUE,
    );
    return $paths;
  }
}

/**
 * Implements hook_permission().
 */
function simpleads_permission() {
  return array(
    'access ad statistics' => array(
      'title' => t('Access ad statistics'),
    ),
    'count ad impressions' => array(
      'title' => t('Count ad impressions'),
    ),
    'count ad clicks' => array(
      'title' => t('Count ad clicks'),
    ),
  );
}

/**
 * Implements hook_node_access().
 */
function simpleads_node_access($node, $op, $account) {
  if (isset($node->type) && $node->type == 'simpleads' && $op == 'view' && !user_access('administer nodes', $account)) {
    return NODE_ACCESS_DENY;
  }
}

/**
 * Implements hook_node_presave().
 */
function simpleads_node_presave($node) {
  if ($node->type == 'simpleads') {
    $start_time = 0;
    $end_time = 0;

    if (isset($node->field_ad_start_date[$node->language]) && !empty($node->field_ad_start_date[$node->language][0]['value'])) {
      $start_time = $node->field_ad_start_date[$node->language][0]['value'];
    }
    if (isset($node->field_ad_end_date[$node->language]) && !empty($node->field_ad_end_date[$node->language][0]['value'])) {
      $end_time = $node->field_ad_end_date[$node->language][0]['value'];
    }

    $start_time = strtotime($start_time);
    $end_time = strtotime($end_time);

    if ($start_time != 0) {
      $node->field_ad_start_date[$node->language][0]['value'] = format_date($start_time, 'custom', 'm/d/Y h:i a');
    }
    if ($end_time != 0) {
      $node->field_ad_end_date[$node->language][0]['value'] = format_date($end_time, 'custom', 'm/d/Y h:i a');
    }
    _simpleads_activate_deactive_ad($node, 'presave');
  }
}

/**
 * Implements hook_node_delete().
 */
function simpleads_node_delete($node) {
  _simpleads_delete_click($node->nid);
  _simpleads_delete_impression($node->nid);
}

/**
 * Implements hook_taxonomy_term_insert().
 */
function simpleads_taxonomy_term_insert($term) {
  if ($term->vocabulary_machine_name == 'ad_groups') {

    $ad_group_name = $term->name;
    $tid = $term->tid;
    $block_delta = $term->vocabulary_machine_name . '_' . $tid;

    $settings = array(
      'ads_limit' => 1,
      'ads_width' => '',
      'ads_height' => '',
      'block_info' => $ad_group_name,
      'block_subject' => t('Advertisement'),
      'block_delta' => $block_delta,
      'ads_page' => '',
      'ads_order' => 0,
    );

    db_insert('simpleads_blocks')
    ->fields(array(
      'tid' => $tid,
      'settings' => serialize($settings),
    ))
    ->execute();
  }
}

/**
 * Implements hook_taxonomy_term_delete().
 */
function simpleads_taxonomy_term_delete($term) {
  db_delete('simpleads_blocks')->condition('tid', $term->tid)->execute();
}

/**
 * Implements hook_block_info().
 */
function simpleads_block_info() {
  $blocks = array();
  $all_blocks = db_select('simpleads_blocks', 'sb')->fields('sb')->execute();
  while ($adblock = $all_blocks->fetchAssoc()) {
    $data = unserialize($adblock['settings']);
    $blocks[$data['block_delta']] = array(
      'info' => t('Advertisement Block: @name', array('@name' => $data['block_info'])),
      'cache' => DRUPAL_NO_CACHE,
    );
  }
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function simpleads_block_view($delta = '') {
  $block = array();
  $all_blocks = db_select('simpleads_blocks', 'sb')->fields('sb')->execute();
  while ($adblock = $all_blocks->fetchAssoc()) {
    $data = unserialize($adblock['settings']);
    if ($data['block_delta'] == $delta) {
      $block = array(
        'subject' => check_plain($data['block_subject']),
        'content' => theme('simpleads_block', array(
          'tid' => $adblock['tid'],
          'ads_limit' => $data['ads_limit'],
          'ads_page' => $data['ads_page'],
          'ads_width' => $data['ads_width'],
          'ads_height' => $data['ads_height'])
        ),
      );
    }
  }
  return $block;
}

/**
 * Implements hook_block_configure().
 */
function simpleads_block_configure($delta = '') {
  $form = array();

  $options = array();
  for ($i = 1; $i < 11; $i++) {
    $options[$i] = $i;
  }

  $all_blocks = db_select('simpleads_blocks', 'sb')->fields('sb')->execute();
  while ($adblock = $all_blocks->fetchAssoc()) {
    $data = unserialize($adblock['settings']);
    if ($data['block_delta'] == $delta) {
      $form['ads_limit'] = array(
        '#type' => 'select',
        '#title' => t('Number of ads to display'),
        '#default_value' => $data['ads_limit'],
        '#options' => $options,
      );
      $form['ads_page'] = array(
        '#type' => 'textfield',
        '#title' => t('Advertise page'),
        '#default_value' => check_plain($data['ads_page']),
      );
      $form['ads_width'] = array(
        '#type' => 'textfield',
        '#title' => t('Ad width'),
        '#default_value' => check_plain($data['ads_width']),
      );
      $form['ads_height'] = array(
        '#type' => 'textfield',
        '#title' => t('Ad height'),
        '#default_value' => check_plain($data['ads_height']),
      );
      $order_options = array();
      $order_options_all = module_invoke_all('simpleads_order_info');
      if (count($order_options_all) > 0) {
        foreach ($order_options_all as $delta => $name) {
          $order_options[$delta] = check_plain($name);
        }
      }
      $form['ads_order'] = array(
        '#type' => 'select',
        '#title' => t('Ads order'),
        '#default_value' => isset($data['ads_order']) ? $data['ads_order'] : 'random',
        '#options' => $order_options,
      );
      $effects = _simpleads_rotation_effects();
      $form['ads_rotation_type'] = array(
        '#type' => 'select',
        '#title' => t('Ads auto rotation type'),
        '#default_value' => isset($data['ads_rotation_type']) ? $data['ads_rotation_type'] : 0,
        '#options' => $effects,
        '#prefix' => '<div id="ads_rotation_settings">',
      );
      $form['ads_rotation_delay'] = array(
        '#type' => 'textfield',
        '#title' => t('Ad rotation delay'),
        '#default_value' => isset($data['ads_rotation_delay']) ? check_plain($data['ads_rotation_delay']) : 10,
        '#description' => t('Delay value is in seconds'),
        '#suffix' => '</div>',
      );
    }
  }
  return $form;
}

/**
 * Implements hook_block_save().
 */
function simpleads_block_save($delta = '', $edit = array()) {

  $all_blocks = db_select('simpleads_blocks', 'sb')->fields('sb')->execute();
  while ($adblock = $all_blocks->fetchAssoc()) {
    $data = unserialize($adblock['settings']);
    if ($data['block_delta'] == $delta) {
      $data['ads_limit'] = $edit['ads_limit'];
      $data['ads_page'] = $edit['ads_page'];
      $data['ads_width'] = $edit['ads_width'];
      $data['ads_height'] = $edit['ads_height'];
      $data['ads_order'] = $edit['ads_order'];
      $data['ads_rotation_type'] = $edit['ads_rotation_type'];
      $data['ads_rotation_delay'] = $edit['ads_rotation_delay'];

      db_update('simpleads_blocks')
      ->fields(array(
        'settings' => serialize($data),
      ))
      ->condition('tid', $adblock['tid'])
      ->execute();
    }
  }
}

/**
 * Menu access callback.
 */
function _simpleads_access_callback() {
  global $user;
  if (user_access('create simpleads content') || (user_access('administer nodes') && user_access('bypass node access'))) {
    return TRUE;
  }
}

/**
 * Menu callback.
 * Callback for AJAX call.
 *
 * @param int $tid
 *   Term ID (Ad group ID)
 *
 * @param int $limit
 *   Number of Ads to retreive.
 *
 * @return string
 *   rendered HTML template.
 */
function _simpleads_show_ads($tid, $limit) {
  if (is_numeric($tid)) {
    $nodes = _simpleads_load_ads($tid, $limit);
    print _simpleads_render_ajax_template($nodes, $tid, $limit);
  }
  exit;
}

/**
 * Menu callback.
 * Redirect Ads.
 * If user is Admin -> redirect to Ad edit page, otherwise redirect to target URL.
 */
function _simpleads_redirect($nid) {
  global $user;
  if (is_numeric($nid)) {
    $node = node_load($nid);
    $url = "";
    if (isset($node->field_ad_url[$node->language]) && !empty($node->field_ad_url[$node->language][0]['value'])) {
      $url = $node->field_ad_url[$node->language][0]['value'];
      if (user_access('administer nodes')) {
        drupal_goto('node/' . $node->nid);
      }
      else {
        if (user_access('count ad clicks')) {
          _simpleads_save_click($node->nid);
        }
        header("Location: " . $url);
      }
    }
    else {
      return t('URL Address is not specified');
    }
  }
  return ' ';
}

/**
 * Menu callback.
 * Redirect to SimpleAds node creation page.
 */
function _simpleads_new_add() {
  drupal_goto('node/add/simpleads', array('query' => array('destination' => 'admin/content/simpleads')));
}

/**
 * Menu callback.
 * Redirect to add new Ad Group taxonomy term page.
 */
function _simpleads_new_group_add() {
  drupal_goto('admin/structure/taxonomy/ad_groups/add', array('query' => array('destination' => 'admin/content/simpleads')));
}

/**
 * Implements hook_theme().
 */
function simpleads_theme($existing, $type, $theme, $path) {
  return array(
    'simpleads_block' => array(
      'variables' => array('tid' => NULL, 'prefix' => NULL, 'ads_limit' => NULL, 'ads_page' => NULL, 'ads_width' => NULL, 'ads_height' => NULL),
      'path' => $path . '/templates',
      'template' => 'simpleads_block',
      'preprocess functions' => array(
        'simpleads_preprocess_simpleads_block',
      ),
    ),
    'simpleads_ajax_call' => array(
      'variables' => array('content' => NULL, 'total_ads' => NULL, 'tid' => NULL, 'settings' => NULL),
      'path' => $path . '/templates',
      'template' => 'simpleads_ajax_call',
    ),
    'simpleads_img_element' => array(
      'variables' => array('ad' => NULL, 'settings' => NULL),
      'path' => $path . '/templates',
      'template' => 'simpleads_img_element',
      'preprocess functions' => array(
        'simpleads_preprocess_simpleads_img_element',
      ),
    ),
    'simpleads_text_element' => array(
      'variables' => array('ad' => NULL, 'settings' => NULL),
      'path' => $path . '/templates',
      'template' => 'simpleads_text_element',
      'preprocess functions' => array(
        'simpleads_preprocess_simpleads_text_element',
      ),
    ),
    'simpleads_flash_element' => array(
      'variables' => array('ad' => NULL, 'settings' => NULL),
      'path' => $path . '/templates',
      'template' => 'simpleads_flash_element',
      'preprocess functions' => array(
        'simpleads_preprocess_simpleads_flash_element',
      ),
    ),
    'simpleads_filter_dashboard' => array(
      'variables' => array('form' => NULL),
      'path' => $path . '/templates',
      'template' => 'simpleads_filter_dashboard',
    ),
  );
}

/**
 * Preprocess for simpleads_block.tpl.php
 */
function simpleads_preprocess_simpleads_block(&$vars) {
  global $user;
  $ads = array();

  $vars = _simpleads_theme_attributes_init($vars);

  $tid = $vars['tid'];
  $limit = $vars['ads_limit'];

  if (is_numeric($tid)) {
    $ads = _simpleads_load_ads($tid, $limit);
  }
  $vars['ads'] = $ads;
  $vars['user_id'] = $user->uid;
}

/**
 * Preprocess for simpleads_img_element.tpl.php
 */
function simpleads_preprocess_simpleads_img_element(&$vars) {
  $link_attributes = array();
  $image_attributes = array();
  $vars = _simpleads_theme_attributes_init($vars);
  _simpleads_increase_impression($vars['ad']['nid']);
  // Image attributes
  $image_attributes['path'] = $vars['ad']['image_uri'];
  $image_attributes['alt'] = check_plain($vars['ad']['alt']);
  if (isset($vars['settings']['ads_width']) && is_numeric($vars['settings']['ads_width'])) {
    $image_attributes['width'] = check_plain($vars['settings']['ads_width']);
  }
  if (isset($vars['settings']['ads_height']) && is_numeric($vars['settings']['ads_height'])) {
    $image_attributes['height'] = check_plain($vars['settings']['ads_height']);
  }

  // Link attributes
  $link_attributes['html'] = TRUE;
  if ($vars['ad']['target'] && !user_access('administer nodes')) {
    $link_attributes['attributes']['target'] = '_blank';
  }

  $vars['link_attributes'] = $link_attributes;
  $vars['image_attributes'] = $image_attributes;
}

/**
 * Preprocess for simpleads_text_element.tpl.php
 */
function simpleads_preprocess_simpleads_text_element(&$vars) {
  $link_attributes = array();
  $vars = _simpleads_theme_attributes_init($vars);
  _simpleads_increase_impression($vars['ad']['nid']);
  // Link attributes
  $link_attributes['html'] = TRUE;
  if ($vars['ad']['target'] && !user_access('administer nodes')) {
    $link_attributes['attributes']['target'] = '_blank';
  }
  $text_ad = "";
  if (!empty($vars['ad']['destination_url']) && $vars['ad']['text_format'] == 'plain_text') {
    $text_ad = l($vars['ad']['text'], $vars['ad']['url'], $link_attributes);
  }
  else {
    $text_ad = $vars['ad']['text'];
  }

  $vars['text_ad'] = $text_ad;
}

/**
 * Preprocess for simpleads_flash_element.tpl.php
 */
function simpleads_preprocess_simpleads_flash_element(&$vars) {
  $vars = _simpleads_theme_attributes_init($vars);
  _simpleads_increase_impression($vars['ad']['nid']);
}

/**
 * Implements hook_cron().
 */
function simpleads_cron() {

  $ads = db_select('node', 'n')->fields('n')
  ->condition('n.type', 'simpleads')
  ->execute();

  foreach ($ads as $ad) {
    $node = node_load($ad->nid);
    _simpleads_activate_deactive_ad($node);
  }
}